package com.example.administrator.mydbcontrol;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.mydbcontrol.tb_city;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TB_CITY.
*/
public class tb_cityDao extends AbstractDao<tb_city, Void> {

    public static final String TABLENAME = "TB_CITY";

    /**
     * Properties of entity tb_city.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cityid = new Property(0, Integer.class, "cityid", false, "CITYID");
        public final static Property Cityname = new Property(1, String.class, "cityname", false, "CITYNAME");
        public final static Property Zipcode = new Property(2, String.class, "zipcode", false, "ZIPCODE");
        public final static Property Provinceid = new Property(3, Integer.class, "provinceid", false, "PROVINCEID");
        public final static Property Datecreated = new Property(4, Long.class, "datecreated", false, "DATECREATED");
        public final static Property Dateupdated = new Property(5, Long.class, "dateupdated", false, "DATEUPDATED");
        public final static Property Citycode = new Property(6, String.class, "citycode", false, "CITYCODE");
    };


    public tb_cityDao(DaoConfig config) {
        super(config);
    }
    
    public tb_cityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TB_CITY' (" + //
                "'CITYID' INTEGER," + // 0: cityid
                "'CITYNAME' TEXT," + // 1: cityname
                "'ZIPCODE' TEXT," + // 2: zipcode
                "'PROVINCEID' INTEGER," + // 3: provinceid
                "'DATECREATED' INTEGER," + // 4: datecreated
                "'DATEUPDATED' INTEGER," + // 5: dateupdated
                "'CITYCODE' TEXT);"); // 6: citycode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TB_CITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tb_city entity) {
        stmt.clearBindings();
 
        Integer cityid = entity.getCityid();
        if (cityid != null) {
            stmt.bindLong(1, cityid);
        }
 
        String cityname = entity.getCityname();
        if (cityname != null) {
            stmt.bindString(2, cityname);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(3, zipcode);
        }
 
        Integer provinceid = entity.getProvinceid();
        if (provinceid != null) {
            stmt.bindLong(4, provinceid);
        }
 
        Long datecreated = entity.getDatecreated();
        if (datecreated != null) {
            stmt.bindLong(5, datecreated);
        }
 
        Long dateupdated = entity.getDateupdated();
        if (dateupdated != null) {
            stmt.bindLong(6, dateupdated);
        }
 
        String citycode = entity.getCitycode();
        if (citycode != null) {
            stmt.bindString(7, citycode);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public tb_city readEntity(Cursor cursor, int offset) {
        tb_city entity = new tb_city( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // cityid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zipcode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // provinceid
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // datecreated
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // dateupdated
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // citycode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tb_city entity, int offset) {
        entity.setCityid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCityname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZipcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvinceid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDatecreated(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDateupdated(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCitycode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(tb_city entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(tb_city entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
